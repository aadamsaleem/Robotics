
EdgeAvoider.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000de  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000132  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000293  00000000  00000000  0000016d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000102  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000255  00000000  00000000  00000502  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000758  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000d6  00000000  00000000  00000778  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000001c0  00000000  00000000  0000084e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000a0e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	52 c0       	rjmp	.+164    	; 0xda <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include<avr/io.h>
#include<util/delay.h>

void main()
{
	DDRC=0b0000000;
  38:	14 ba       	out	0x14, r1	; 20
	DDRB=0b11111111;
  3a:	8f ef       	ldi	r24, 0xFF	; 255
  3c:	87 bb       	out	0x17, r24	; 23
			PORTB=0b00001001;
		}

		else if((a==0b0000001)&&(b==0b0000000))
		{
			PORTB=0b00000110;
  3e:	76 e0       	ldi	r23, 0x06	; 6
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  40:	49 e1       	ldi	r20, 0x19	; 25
  42:	50 e0       	ldi	r21, 0x00	; 0
			_delay_ms(1000);
			PORTB=0b00001000;
  44:	68 e0       	ldi	r22, 0x08	; 8
		a=PINC&0b0000001;
		b=PINC&0b0000010;

		if((a==0b0000001)&&(b==0b0000010))
		{
			PORTB=0b00001001;
  46:	b9 e0       	ldi	r27, 0x09	; 9
		}
		else if((a==0b0000000)&&(b==0b0000010))
		{
			PORTB=0b00000110;
			_delay_ms(1000);
			PORTB=0b00000001;
  48:	a1 e0       	ldi	r26, 0x01	; 1

	int a=0,b=0;

	while(1)
	{
		a=PINC&0b0000001;
  4a:	93 b3       	in	r25, 0x13	; 19
		b=PINC&0b0000010;
  4c:	83 b3       	in	r24, 0x13	; 19
  4e:	28 2f       	mov	r18, r24
  50:	30 e0       	ldi	r19, 0x00	; 0
  52:	22 70       	andi	r18, 0x02	; 2
  54:	30 70       	andi	r19, 0x00	; 0

		if((a==0b0000001)&&(b==0b0000010))
  56:	90 ff       	sbrs	r25, 0
  58:	18 c0       	rjmp	.+48     	; 0x8a <__SREG__+0x4b>
  5a:	22 30       	cpi	r18, 0x02	; 2
  5c:	31 05       	cpc	r19, r1
  5e:	11 f4       	brne	.+4      	; 0x64 <__SREG__+0x25>
		{
			PORTB=0b00001001;
  60:	b8 bb       	out	0x18, r27	; 24
  62:	f3 cf       	rjmp	.-26     	; 0x4a <__SREG__+0xb>
		}

		else if((a==0b0000001)&&(b==0b0000000))
  64:	23 2b       	or	r18, r19
  66:	89 f7       	brne	.-30     	; 0x4a <__SREG__+0xb>
		{
			PORTB=0b00000110;
  68:	78 bb       	out	0x18, r23	; 24
  6a:	80 e1       	ldi	r24, 0x10	; 16
  6c:	97 e2       	ldi	r25, 0x27	; 39
  6e:	fa 01       	movw	r30, r20
  70:	31 97       	sbiw	r30, 0x01	; 1
  72:	f1 f7       	brne	.-4      	; 0x70 <__SREG__+0x31>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  74:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  76:	d9 f7       	brne	.-10     	; 0x6e <__SREG__+0x2f>
			_delay_ms(1000);
			PORTB=0b00001000;
  78:	68 bb       	out	0x18, r22	; 24
  7a:	80 e1       	ldi	r24, 0x10	; 16
  7c:	97 e2       	ldi	r25, 0x27	; 39
  7e:	fa 01       	movw	r30, r20
  80:	31 97       	sbiw	r30, 0x01	; 1
  82:	f1 f7       	brne	.-4      	; 0x80 <__SREG__+0x41>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  84:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  86:	d9 f7       	brne	.-10     	; 0x7e <__SREG__+0x3f>
  88:	e0 cf       	rjmp	.-64     	; 0x4a <__SREG__+0xb>
			_delay_ms(1000);
		}
		else if((a==0b0000000)&&(b==0b0000010))
  8a:	22 30       	cpi	r18, 0x02	; 2
  8c:	31 05       	cpc	r19, r1
  8e:	89 f4       	brne	.+34     	; 0xb2 <__SREG__+0x73>
		{
			PORTB=0b00000110;
  90:	78 bb       	out	0x18, r23	; 24
  92:	80 e1       	ldi	r24, 0x10	; 16
  94:	97 e2       	ldi	r25, 0x27	; 39
  96:	fa 01       	movw	r30, r20
  98:	31 97       	sbiw	r30, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <__SREG__+0x59>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  9c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  9e:	d9 f7       	brne	.-10     	; 0x96 <__SREG__+0x57>
			_delay_ms(1000);
			PORTB=0b00000001;
  a0:	a8 bb       	out	0x18, r26	; 24
  a2:	80 e1       	ldi	r24, 0x10	; 16
  a4:	97 e2       	ldi	r25, 0x27	; 39
  a6:	fa 01       	movw	r30, r20
  a8:	31 97       	sbiw	r30, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <__SREG__+0x69>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ac:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ae:	d9 f7       	brne	.-10     	; 0xa6 <__SREG__+0x67>
  b0:	cc cf       	rjmp	.-104    	; 0x4a <__SREG__+0xb>
			_delay_ms(1000);
		}
		else if((a==0b0000000)&&(b==0b0000000))
  b2:	23 2b       	or	r18, r19
  b4:	09 f0       	breq	.+2      	; 0xb8 <__SREG__+0x79>
  b6:	c9 cf       	rjmp	.-110    	; 0x4a <__SREG__+0xb>
		{
			PORTB=0b00000000;
  b8:	18 ba       	out	0x18, r1	; 24
  ba:	80 e1       	ldi	r24, 0x10	; 16
  bc:	97 e2       	ldi	r25, 0x27	; 39
  be:	fa 01       	movw	r30, r20
  c0:	31 97       	sbiw	r30, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <__SREG__+0x81>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c6:	d9 f7       	brne	.-10     	; 0xbe <__SREG__+0x7f>
			_delay_ms(1000);
			PORTB=0b00001000;
  c8:	68 bb       	out	0x18, r22	; 24
  ca:	80 e1       	ldi	r24, 0x10	; 16
  cc:	97 e2       	ldi	r25, 0x27	; 39
  ce:	fa 01       	movw	r30, r20
  d0:	31 97       	sbiw	r30, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <__SREG__+0x91>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d6:	d9 f7       	brne	.-10     	; 0xce <__SREG__+0x8f>
  d8:	b8 cf       	rjmp	.-144    	; 0x4a <__SREG__+0xb>

000000da <_exit>:
  da:	f8 94       	cli

000000dc <__stop_program>:
  dc:	ff cf       	rjmp	.-2      	; 0xdc <__stop_program>
