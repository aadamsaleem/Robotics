
line_follower.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000078  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  000000ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000008b  00000000  00000000  00000107  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000059  00000000  00000000  00000192  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000cc  00000000  00000000  000001eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000002b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000097  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	1f c0       	rjmp	.+62     	; 0x74 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include<avr/io.h>
#include<util/delay.h>

void main()
{
	DDRC = 0b0000000; // or (0x00) in hex
  38:	14 ba       	out	0x14, r1	; 20
	DDRB = 0b11111111; // or (0xff) in hex
  3a:	8f ef       	ldi	r24, 0xFF	; 255
  3c:	87 bb       	out	0x17, r24	; 23
		{
			PORTB=0b00000001;
		}	
		else if((l==0b0000001)&&(r==0b0000000))
		{
			PORTB=0b00001000;
  3e:	68 e0       	ldi	r22, 0x08	; 8
		l=PINC&0b0000001;
		r=PINC&0b0000010;

		if((l==0b0000001)&&(r==0b0000010))
		{
			PORTB=0b00001001;
  40:	59 e0       	ldi	r21, 0x09	; 9
		}
		else if((l==0b0000000)&&(r==0b0000010))
		{
			PORTB=0b00000001;
  42:	41 e0       	ldi	r20, 0x01	; 1
	DDRC = 0b0000000; // or (0x00) in hex
	DDRB = 0b11111111; // or (0xff) in hex
	int l=0,r=0;
	while(1)
	{
		l=PINC&0b0000001;
  44:	93 b3       	in	r25, 0x13	; 19
		r=PINC&0b0000010;
  46:	83 b3       	in	r24, 0x13	; 19
  48:	28 2f       	mov	r18, r24
  4a:	30 e0       	ldi	r19, 0x00	; 0
  4c:	22 70       	andi	r18, 0x02	; 2
  4e:	30 70       	andi	r19, 0x00	; 0

		if((l==0b0000001)&&(r==0b0000010))
  50:	90 ff       	sbrs	r25, 0
  52:	05 c0       	rjmp	.+10     	; 0x5e <__SREG__+0x1f>
  54:	22 30       	cpi	r18, 0x02	; 2
  56:	31 05       	cpc	r19, r1
  58:	39 f4       	brne	.+14     	; 0x68 <__SREG__+0x29>
		{
			PORTB=0b00001001;
  5a:	58 bb       	out	0x18, r21	; 24
  5c:	f3 cf       	rjmp	.-26     	; 0x44 <__SREG__+0x5>
		}
		else if((l==0b0000000)&&(r==0b0000010))
  5e:	22 30       	cpi	r18, 0x02	; 2
  60:	31 05       	cpc	r19, r1
  62:	31 f4       	brne	.+12     	; 0x70 <__SREG__+0x31>
		{
			PORTB=0b00000001;
  64:	48 bb       	out	0x18, r20	; 24
  66:	ee cf       	rjmp	.-36     	; 0x44 <__SREG__+0x5>
		}	
		else if((l==0b0000001)&&(r==0b0000000))
  68:	23 2b       	or	r18, r19
  6a:	11 f4       	brne	.+4      	; 0x70 <__SREG__+0x31>
		{
			PORTB=0b00001000;
  6c:	68 bb       	out	0x18, r22	; 24
  6e:	ea cf       	rjmp	.-44     	; 0x44 <__SREG__+0x5>
		{
			PORTB=0b00000000;
		}
		else
		{
			PORTB=0b0000000;
  70:	18 ba       	out	0x18, r1	; 24
  72:	e8 cf       	rjmp	.-48     	; 0x44 <__SREG__+0x5>

00000074 <_exit>:
  74:	f8 94       	cli

00000076 <__stop_program>:
  76:	ff cf       	rjmp	.-2      	; 0x76 <__stop_program>
